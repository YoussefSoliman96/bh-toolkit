// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model User {
//   id        Int      @id @default(autoincrement())
//   firstName String
//   lastName  String
//   username  String   @unique
//   password  String
//   title     String
//   gender    Gender
//   language  String   @default("English")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Provider {
  id                       Int      @id @default(autoincrement())
  title                    Title
  role                     Role
  firstName                String
  lastName                 String
  gender                   Gender
  evaluation               String   @default("30")
  followUp                 String   @default("10")
  languages                String   @default("English")
  ageRange                 String
  workingHours             String   @default("")
  suboxoneAddiction        Boolean  @default(false)
  adhd                     Boolean  @default(false)
  schizophreniaBipolar     Boolean  @default(false)
  clozapine                Boolean  @default(false)
  autism                   Boolean  @default(false)
  acceptPainManagementPts  Boolean  @default(false)
  traumaticBrainInjury     Boolean  @default(false)
  neurodegenerativeDisease Boolean  @default(false)
  minorsAfterSchool        Boolean  @default(false)
  link                     String   @default("")
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

enum Title {
  NP
  MD
  DNP
  DO
  AMFT
  APCC
  LCSW
  PhD
  PsyD
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  PSYCHIATRIST
  THERAPIST
  RESIDENCY
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  username      String    @unique
  password      String
  title         String
  gender        Gender
  language      String    @default("English")
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
